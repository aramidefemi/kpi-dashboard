{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["RangePicker","DatePicker","Title","Typography","Text","Link","getStats","url","a","axios","get","response","console","log","data","error","App","useState","purchases","setPurchases","users","setUsers","products","setProducts","newSeller","setNewSeller","merchants","setMerchants","sellers","setSellers","median","setMedian","handleUpdateState","type","payload","reducer","handleUpdateAll","onChange","dateString","start","end","useEffect","moment","format","action","userCount","partition","new_seller","className","style","padding","span","mark","level","date","margin","gutter","title","value","loading","size","header","footer","dataSource","renderItem","item","Item","currency","merchant_revenue","profit","count","median_val","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fcfa78b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport {\n  Row,\n  Card,\n  Col,\n  Statistic,\n  List,\n  Button,\n  DatePicker,\n  Dropdown,\n} from 'antd';\nimport { Menu } from 'antd';\nimport { DownOutlined } from '@ant-design/icons';\n\nimport { Typography } from 'antd';\nimport './App.css';\n\nimport 'antd/dist/antd.css';\nconst { RangePicker } = DatePicker;\nconst { Title, Text, Link } = Typography;\n\nfunction App() {\n  const [purchases, setPurchases] = useState({});\n  const [users, setUsers] = useState({});\n  const [products, setProducts] = useState({});\n  const [newSeller, setNewSeller] = useState({});\n  const [merchants, setMerchants] = useState({});\n  const [sellers, setSellers] = useState({});\n  const [median, setMedian] = useState({});\n\n  const handleUpdateState = async (type, payload) => {\n    reducer({\n      type,\n      payload,\n    });\n  };\n\n  const handleUpdateAll = async (payload) => {\n    handleUpdateState('GetUsersCount', payload);\n    handleUpdateState('GetProductsCountByInterval', payload);\n    handleUpdateState('GetMerchants', payload);\n    handleUpdateState('GetNewSellers', payload);\n    handleUpdateState('GetUniqueSellers', payload);\n    handleUpdateState('GetMerchantsMedian', payload);\n    handleUpdateState('GetTransactions', payload);\n  };\n  useEffect(() => {\n    const end = moment().format('YYYY-MM-D');\n    const payload = {\n      start: '2019-10-18',\n      end,\n    };\n    handleUpdateAll(payload)\n  }, []);\n\n  function onChange(type, dateString) {\n    const payload = {\n      start: dateString[0],\n      end: dateString[1],\n    };\n    handleUpdateState(type, payload);\n    console.log(dateString);\n  }\n  const reducer = async (action) => {\n    let partition;\n    switch (action.type) {\n      case 'GetUsersCount':\n        const userCount = await getStats(\n          `/kpi/users/${action.payload.start}/${action.payload.end}`\n        );\n        return setUsers(userCount || {});\n      case 'GetTransactions':\n        partition = await getStats(\n          `/kpi/transactions/${action.payload.start}/${action.payload.end}`\n        );\n        return setPurchases(partition || {});\n      case 'GetProductsCountByInterval':\n        partition = await getStats(\n          `/kpi/products/${action.payload.start}/${action.payload.end}`\n        );\n        return setProducts(partition || {});\n      case 'GetMerchants':\n        partition = await getStats(\n          `/kpi/merchants/${action.payload.start}/${action.payload.end}`\n        );\n        return setMerchants(partition || {});\n      case 'GetNewSellers':\n        partition = await getStats(\n          `/kpi/sellers/first-time/${action.payload.start}/${action.payload.end}`\n        );\n        return setNewSeller(partition.new_seller || {});\n      case 'GetUniqueSellers':\n        partition = await getStats(\n          `/kpi/sellers/${action.payload.start}/${action.payload.end}`\n        );\n        return setSellers(partition || {});\n      case 'GetMerchantsMedian':\n        partition = await getStats(\n          `/kpi/merchants/median/${action.payload.start}/${action.payload.end}`\n        );\n        return setMedian(partition || {});\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div className=\"app\" style={{ padding: '20px 50px' }}>\n      <Row>\n        <Col span={10}>\n          {' '}\n          <Title mark level={3}>\n            KPI Dashboard\n          </Title>\n        </Col>\n        <Col span={8}>\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) =>{\n                    const payload = {\n                        start: dateString[0],\n                        end: dateString[1],\n                      };\n                 handleUpdateAll(payload);\n                 }} />\n        </Col>\n      </Row>\n      <Row>\n        <Col span={16}>\n          <Card style={{ margin: '10px' }}>\n            <Row gutter={16}>\n              <Col span={12}>\n                <Statistic title=\"Users\" value={users.users} loading={!users} />\n                <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetUsersCount',dateString)} />\n              </Col>\n              <Col span={12}>\n                <Statistic\n                  title=\"merchants\"\n                  value={merchants.merchants}\n                  loading={!merchants}\n                />\n                <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetMerchants',dateString)} />\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col span={8}>\n          {' '}\n          <Card style={{ margin: '10px' }}>\n            <Statistic\n              title=\"products\"\n              value={products.products}\n              loading={!products}\n            />\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetProductsCountByInterval',dateString)} />\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={8}>\n          {' '}\n          <Card title=\"Transactions\" type=\"inner\" style={{ margin: '10px' }}>\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetTransactions',dateString)} />\n            <List\n              size=\"small\"\n              header={null}\n              footer={null}\n              dataSource={purchases.purchases || []}\n              renderItem={(item) => (\n                <List.Item>\n                  <div>\n                    <Text type=\"secondary\">Currency ({item.currency})</Text>\n                  </div>\n                  <div>\n                    <Text type=\"success\">\n                      Merchant Revenue ({item.merchant_revenue})\n                    </Text>\n                  </div>\n                   \n                  <p>Our Profit {item.profit}</p>\n                </List.Item>\n              )}\n            />\n          </Card>\n        </Col>\n        <Col span={8}>\n          {' '}\n          <Card title=\"Sellers\" type=\"inner\" style={{ margin: '10px' }}>\n            <Statistic title=\"With First Sales\" value={newSeller.count} />\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetNewSellers',dateString)} />\n            <Statistic\n              title=\"New on the platform\"\n              value={sellers.sellers}\n              loading={!sellers}\n            />\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetUniqueSellers',dateString)} />\n          </Card>\n        </Col>\n        <Col span={8}>\n          {' '}\n          <Card\n            title=\"Sellers Median Avg\"\n            type=\"inner\"\n            style={{ margin: '10px' }}\n          >\n            <Statistic value={median.median_val} loading={!median} />\n            <RangePicker format=\"YYYY-MM-DD\" onChange={(date, dateString) => onChange('GetMerchantsMedian',dateString)} />\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nasync function getStats(url) {\n  try {\n    const response = await axios.get(`http://127.0.0.1:8000/api${url}`);\n\n    console.log(response);\n    return response.data.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((  <App />\n            \n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}